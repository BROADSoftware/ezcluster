
import os
import argparse
#import logging
import logging.config
import yaml
import sys
from pykwalify.core import Core as kwalify

import misc
from misc import ERROR,findUpward
from dumper import Dumper
from plugin import buildPlugins, buildTargetFileByName
from schema import buildSchema,buildConfigSchema
from generator import generate


logger = logging.getLogger("ezcluster.main")


PLUGINS_PATH="plugins_paths"


def buildConfig(sourceFileDir):
    configFile = findUpward("ezconfig.yml", sourceFileDir)
    logger.info("Using '{}' as configuration file".format(configFile))
    config =  yaml.load(open(configFile))
    if PLUGINS_PATH not in config:
        ERROR("Missing '{}' in configuration file".format(PLUGINS_PATH))
    # Adjust plugin path relative to the config file
    baseDir = os.path.dirname(sourceFileDir)
    for index, dir in enumerate(config[PLUGINS_PATH]):
        config[PLUGINS_PATH][index] = misc.appendPath(baseDir,  config[PLUGINS_PATH][index])
    return (config, configFile)
    

def main():
    mydir =  os.path.dirname(os.path.realpath(__file__)) 
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--src', required=True)
    parser.add_argument('--mark', choices=["none", "both", "start", "end"])
    parser.add_argument('--dump', action='store_true')
    parser.add_argument('--out')    # Generate a file to set some variable
    
    param = parser.parse_args()

    loggingConfFile =  os.path.join(mydir, "./logging.yml")
    logging.config.dictConfig(yaml.load(open(loggingConfFile)))

    sourceFile = os.path.normpath(os.path.abspath(param.src))
    if not os.path.isfile(sourceFile):
        ERROR("File '{}' does not exists".format(sourceFile))
    logger.info("Will handle '{}'".format(sourceFile))
    sourceFileDir = os.path.dirname(sourceFile)
    config,configFile = buildConfig(sourceFileDir)
    
    cluster = yaml.load(open(sourceFile))
    targetFolder = misc.appendPath(sourceFileDir, cluster["build_folder"] if "build_folder" in cluster else "build")
    misc.ensureFolder(targetFolder)
    logger.info("Build folder: '{}'".format(targetFolder))
    
    logger.debug("Plugins path:'{}'".format(config[PLUGINS_PATH]))
    plugins = buildPlugins(cluster, config[PLUGINS_PATH])
    
    schema = buildSchema(mydir, plugins)
    configSchema = buildConfigSchema(mydir, plugins)

    if param.dump:
        dumper = Dumper(targetFolder)
        dumper.dump("schema.json", schema)
        dumper.dump("config-schema.json", configSchema)
        dumper.dump("config.json", config)

    k = kwalify(source_data = cluster, schema_data=schema)
    k.validate(raise_exception=False)
    if len(k.errors) != 0:
        ERROR("Problem {0}: {1}".format(sourceFile, k.errors))
    
    k = kwalify(source_data = config, schema_data=configSchema)
    k.validate(raise_exception=False)
    if len(k.errors) != 0:
        ERROR("Configuration problem {0}: {1}".format(configFile, k.errors))
    
    data = {}
    data['sourceFileDir'] = sourceFileDir
    data["targetFolder"] = targetFolder
    data['ezclusterHome'] = misc.appendPath(mydir,"..")
    data["rolePaths"] = set()
                
    model = {}
    model['cluster'] = cluster
    model["config"] = config
    model['data'] = data
            
    for plugin in plugins:
        plugin.groom(model)

    targetFileByName = buildTargetFileByName(plugins)

    if param.dump:
        dumper.dump("cluster.json", model['cluster'])
        dumper.dump("data.json", model['data'])
        dumper.dump("targetFileByName.json", targetFileByName)
        for plugin in plugins:
            plugin.dump(model, dumper)
    
    generate(targetFileByName, targetFolder, model, param.mark)
    
    if "out" in param:
        f = open(param.out, "w+")
        f.write("# Generated by ezcluster:\n")
        if "buildScript" in model["data"]:
            f.write('BUILD_SCRIPT="{}"\n'.format(model["data"]["buildScript"]))
        f.close()
    
if __name__ == '__main__':
    sys.exit(main())
    
    