#!/bin/bash
# Script to create a VM on a kvm based infrastructure
# VM is built from a template.
#

set -e
set +x

SSH_OPTIONS="-t -t -q"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $MYDIR/functions.sh

TEMPLATES_FOLDER=/vol00/templates

function usage {
	echo 'buildVM --host <host> --name <VM_name> --ram <Memory_in_GB> --vcpu <Nbr_Vcpu> --volume <Volume(vol0-4)>  --template <template>\
	     --hostname <VM_hostname> --bridge <Network_Bridge> --ip <IP_Address> --netmask <Netmask> --gateway <Gateway> --search <domain_search>'
}

while [[ $# > 0 ]]
do
	case $1 in
		--name)
			NAME=$2
			shift
		;;
		--host)
			HOST=$2
			shift
		;;
		--template)
			TEMPLATE=$2
			shift
		;;
		--ram)
			RAM=$(expr $2 \* 1024)
			shift
		;;
		--vcpu)
			VCPU=$2
			shift
		;;
		--volume)
			VOLUME=$2
			shift
		;;
		--hostname)
			VM_HOSTNAME=$2
			shift
		;;
		--bridge)
			BRIDGE=$2
			shift
		;;
		--ip)
			IP=$2
			shift
		;;
		--netmask)
			NETMASK=$2
			shift
		;;
		--gateway)
			GATEWAY=$2
			shift
		;;
		--search)
			SEARCH=$2
			shift
		;;
		*)
			echo "Unknown parameter $1"
			usage
			exit 1
		;;
	esac
	shift
done

if [ "$NAME" = "" ]; then echo "Missing --name parameters"; usage; exit 1; fi
if [ "$RAM" = "" ]; then echo "Missing --ram parameters"; usage; exit 1; fi
if [ "$HOST" = "" ]; then echo "Missing --host parameters";	usage; exit 1; fi
if [ "$VCPU" = "" ]; then echo "Missing --vcpu parameters";	exit 1; fi
if [ "$VOLUME" = "" ]; then echo "Missing --volume parameters";	exit 1; fi
if [ "$VM_HOSTNAME" = "" ]; then echo "Missing --hostname parameters"; usage; exit 1; fi
if [ "$BRIDGE" = "" ]; then echo "Missing --bridge parameters"; usage; exit 1; fi
if [ "$IP" = "" ]; then echo "Missing --ip parameters"; usage; exit 1; fi
if [ "$NETMASK" = "" ]; then echo "Missing --netmask parameters"; usage; exit 1; fi
if [ "$GATEWAY" = "" ]; then echo "Missing --gateway parameters"; usage; exit 1; fi
if [ "$TEMPLATE" = "" ]; then echo "Missing --template parameters"; usage; exit 1; fi
if [ "$SEARCH" = "" ]; then echo "Missing --search parameters"; usage; exit 1; fi

DSK=/${VOLUME}/libvirt/images/${NAME}_vda.qcow2

#cat >/dev/null <<GOTO_1

set +e
ensure_ip_free $IP

# Ensure we will not overwrite an existing one
set +x

ssh $SSH_OPTIONS $HOST "ls $DSK" >/dev/null
if [ $? -eq 0 ]; then echo "DISK ${DSK} ALREADY EXISTING ON ${HOST}!!!. WILL STOP"; exit 1; fi 
set -e

echo "Extract disk image from template archive..."
CMD="cd /${VOLUME}/libvirt/images/; mkdir ${NAME}; cd ${NAME}; tar xf ${TEMPLATES_FOLDER}/${TEMPLATE}_vda.tar; mv ${TEMPLATE}_vda.qcow2 ../${NAME}_vda.qcow2; cd ..; rmdir ${NAME};"
#echo "Exec on $HOST -> $CMD"
ssh $SSH_OPTIONS $HOST "sudo bash -c '${CMD}'"

#GOTO_1

echo "Mounting ${NAME} disk image"
CMD="mkdir /tmp/${NAME};guestmount -a /${VOLUME}/libvirt/images/${NAME}_vda.qcow2 -i /tmp/${NAME}"
#echo "Exec on $HOST -> $CMD"
ssh $SSH_OPTIONS $HOST "sudo bash -c '${CMD}'"


IFCONFIG=$(cat <<EOF
# generated by buildVM
IPADDR=${IP}
NETMASK=${NETMASK}
BOOTPROTO=static
DEVICE=eth0
ONBOOT=yes
IPV6INIT=no
EOF
)

NETWORK=$(cat <<EOF
# generated by buildVM
DNS1=10.58.0.1
DNS2=10.58.0.2
DNS3=10.58.0.4
GATEWAY=${GATEWAY}
HOSTNAME=${NAME}
SEARCH=${SEARCH}
EOF
)

RESOLVE=$(cat <<EOF
; generated by buildVM
search ${SEARCH}

nameserver 10.58.0.1
nameserver 10.58.0.2
nameserver 10.58.0.4
EOF
)

echo "Configure ${NAME} eth0 interface"

CMD="echo \"$IFCONFIG\" >/tmp/${NAME}/etc/sysconfig/network-scripts/ifcfg-eth0"
#echo "Exec on $HOST -> $CMD"
ssh $SSH_OPTIONS $HOST "sudo bash -c '${CMD}'"

echo "Configure ${NAME} /etc/sysconfig/network"
CMD="echo \"$NETWORK\" >/tmp/${NAME}/etc/sysconfig/network"
#echo "Exec on $HOST -> $CMD"
ssh $SSH_OPTIONS $HOST "sudo bash -c '${CMD}'"

echo "Configure ${NAME} /etc/resolv.conf"
CMD="echo \"$RESOLVE\" >/tmp/${NAME}/etc/resolv.conf"
#echo "Exec on $HOST -> $CMD"
ssh $SSH_OPTIONS $HOST "sudo bash -c '${CMD}'"

echo "Configure ${NAME} /etc/hostname"
CMD="echo \"$NAME\" >/tmp/${NAME}/etc/hostname"
#echo "Exec on $HOST -> $CMD"
ssh $SSH_OPTIONS $HOST "sudo bash -c '${CMD}'"


#bash

echo "Unmounting ${NAME} disk image"
CMD="guestunmount /tmp/${NAME}; rmdir /tmp/${NAME};"
#echo "Exec on $HOST -> $CMD"
ssh $SSH_OPTIONS $HOST "sudo bash -c '${CMD}'"


echo "Create VMs"
# Added --cpu host To allow kvm in kvm
CMD="virt-install -n ${NAME} -r ${RAM} --vcpus=${VCPU}  --network bridge=${BRIDGE},model=virtio --disk path=$DSK --import --accelerate --graphics vnc,listen=0.0.0.0,keymap=local --os-type=linux --os-variant=rhel7 --noreboot --cpu host"
#echo "Exec on $HOST -> $CMD"
ssh $SSH_OPTIONS $HOST "sudo bash -c '${CMD}'"
		 
#echo "Waiting for the VM  $NAME to shutdown"

#wait_shutdown $HOST $NAME "Waiting $NAME down\n"		

#echo "Mark as autostart"
#ssh $SSH_OPTIONS $HOST "sudo virsh autostart ${NAME}"

echo "$NAME built and halted"


